Rcpp::sourceCpp('src/test.cpp')
library(BioTmR)
rcpp_hello()
Rcpp::sourceCpp('src/rcpp_hello.cpp')
rcpp_hello()
library(BioTmR)
rcpp_hello()
rcpp_hello()
rcpp_hello()
library(BioTmR)
library(BioTmR)
rcpp_hello()
cppFunction(
'
int test(){
std::cout << "lipidong";
}
'
)
library(Rcpp)
cppFunction(
'
int test(){
std::cout << "lipidong";
}
'
)
cppFunction(
'
int test(){
std::cout << "lipidong";
return 0;
}
'
)
cppFunction(
'
#include <Rcpp.h>
using namespace Rcpp;
int test(){
Rcout << "lipidong";
return 0;
}
'
)
cppFunction('
bool Any(LogicalVector x)
{
for(int i = 0; i < x.size(); ++i)
{
if(x[i])
{
return true;
}
}
return false;
}
')
Any(c(T,F,F))
cppFunction(
'
int test(){
Rcout << "lipidong";
return 0;
}
'
)
test()
Rcpp::sourceCpp('src/rcpp_hello.cpp')
rcpp_hello()
library(BioTmR)
test()
Rcpp::sourceCpp('src/test.cpp')
library(BioTmR)
test()
Rcpp::sourceCpp('src/test.cpp')
test()
library(BioTmR)
test()
rccp_hello()
rcpp_hello()
library(BioTmR)
test()
rcpp_hello()
getwd)
getwd()
compileAttributes()
settings=getPlugin("Rcpp")
library(Rcpp)
settings=getPlugin("Rcpp")
library(inline)
install.packages('inline')
library(inline)
settings=getPlugin("Rcpp")
settings
settings$env$PKG_CXXFLAGS
settings$env$PKG_CXXFLAGS=paste('-std=g++',settings$env$PKG_CXXFLAGS,sep=' ')
fun=cxxfunction(signature(),src,plugin="Rcpp",settings=settings)
fun=cxxfunction(signature(),src,plugin="Rcpp",settings=settings)
Sys.unsetenv('PKG_CXXFLAGS')
settings$env$PKG_CXXFLAGS
settings$env$PKG_CXXFLAGS=paste('-std=c++0x',settings$env$PKG_CXXFLAGS,sep=' ')
fun=cxxfunction(signature(),src,plugin="Rcpp",settings=settings)
Sys.unsetenv('PKG_CXXFLAGS')
library(BioTmR)
library(BioTmR)
crf_train()
library(BioTmR)
crf_train()
library(BioTmR)
crf_train()
library(BioTmR)
crf_learn()
crf_train()
library(BioTmR)
train_data <- read.delim('./train.data', sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
aa <- crf_train(train_data, template_data = './template')
test_data <- read.delim('./test.data', sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
label_data <-  test_data[,ncol(test_data)]
test_data <- test_data[, -ncol(test_data)]
test_path <- paste(c(tempdir(), 'test_data_', rnorm(1)), collapse = '')
write.table(test_data, test_path, row.names = F, na="", quote = F)
output_path <- paste(c(tempdir(), 'crf_test_out_data_', rnorm(1)), collapse = '')
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
aa
model_path=aa
nbest = '1'
nbest = '0'
cost_factor = '1'
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
out
out <- read.delim(output_path, sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
out
out <- read.delim(output_path, sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F, row.names = F)
out <- read.delim(output_path, sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
cat(out)
class(out)
out[,1]
strsplit(out[,1], '\\t')
strsplit(out[,1], '\\t') %>% do.call('rbind', .)
out <- strsplit(out[,1], '\\t') %>% do.call('rbind', .)
labels
label=T
aa <- cbind(out,label_data)
nrow(label_data)
aa <- cbind(out,label_data %>% as.data.frame())
class(out)
aa <- cbind(out %>% as.data.frame(),label_data %>% as.data.frame())
View(out)
write.table(test_data, test_path, row.names = F, na="", quote = F, col.names = F)
output_path <- paste(c(tempdir(), 'crf_test_out_data_', rnorm(1)), collapse = '')
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
out <- read.delim(output_path, sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
out <- strsplit(out[,1], '\\t') %>% do.call('rbind', .) %>% as.data.frame()
cbind(out,label_data)
nrow(out)
nrow(label_data)
length(label_data)
output_path
View(test_data)
out <- read.delim(output_path, sep = '\t', blank.lines.skip = F, stringsAsFactors = F, header = F)
View(out)
cbind(out,label_data)
aa  <- cbind(out,label_data)
View(aa)
crf_test <- function(test_data, model_path='model.out' , nbest = '0', cost_factor = '1', label = F){
if(!is.data.frame(test_data) & is.matrix(test_data)) stop('test_data must be data.fram or matrix.')
if(!file.exists(model_path)) stop('the model file does not exist.')
if(label){
label_data <-  test_data[,ncol(test_data)]
test_data <- test_data[, -ncol(test_data)]
}
test_path <- paste(c(tempdir(), 'test_data_', rnorm(1)), collapse = '')
write.table(test_data, test_path, row.names = F, na="", quote = F, col.names = F)
output_path <- paste(c(tempdir(), 'crf_test_out_data_', rnorm(1)), collapse = '')
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
out <- read.delim(output_path, sep = '\t', blank.lines.skip = F, stringsAsFactors = F, header = F)
ifelse(label, cbind(out,label_data), out)
}
aa <- crf_test(test_data,model_path = aa, label = T)
aa
aa <- crf_train(train_data, template_data = './template')
bb <- crf_test(test_data = test_data,model_path =aa, label = T )
if(!is.data.frame(test_data) & is.matrix(test_data)) stop('test_data must be data.fram or matrix.')
if(!file.exists(model_path)) stop('the model file does not exist.')
label=T
if(label){
label_data <-  test_data[,ncol(test_data)]
test_data <- test_data[, -ncol(test_data)]
}
test_path <- paste(c(tempdir(), 'test_data_', rnorm(1)), collapse = '')
write.table(test_data, test_path, row.names = F, na="", quote = F, col.names = F)
output_path <- paste(c(tempdir(), 'crf_test_out_data_', rnorm(1)), collapse = '')
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
out <- read.delim(output_path, sep = '\t', blank.lines.skip = F, stringsAsFactors = F, header = F)
output_path
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
test_path
test_data <- read.delim('./test.data', sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
bb <- crf_test(test_data = test_data, model_path =aa, label = T )
View(bb)
View(test_data)
crf_test <- function(test_data, model_path='model.out' , nbest = '0', cost_factor = '1', label = F){
if(!is.data.frame(test_data) & is.matrix(test_data)) stop('test_data must be data.fram or matrix.')
if(!file.exists(model_path)) stop('the model file does not exist.')
if(label){
label_data <-  test_data[,ncol(test_data)]
test_data <- test_data[, -ncol(test_data)]
}
test_path <- paste(c(tempdir(), 'test_data_', rnorm(1)), collapse = '')
write.table(test_data, test_path, row.names = F, na="", quote = F, col.names = F)
output_path <- paste(c(tempdir(), 'crf_test_out_data_', rnorm(1)), collapse = '')
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
out <- read.delim(output_path, sep = '\t', blank.lines.skip = F, stringsAsFactors = F, header = F)
ifelse(label, cbind(out,label_data), out)
}
bb <- crf_test(test_data = test_data, model_path =aa, label = T )
View(bb)
output_path
if(!is.data.frame(test_data) & is.matrix(test_data)) stop('test_data must be data.fram or matrix.')
if(!file.exists(model_path)) stop('the model file does not exist.')
if(label){
label_data <-  test_data[,ncol(test_data)]
test_data <- test_data[, -ncol(test_data)]
}
test_path <- paste(c(tempdir(), 'test_data_', rnorm(1)), collapse = '')
write.table(test_data, test_path, row.names = F, na="", quote = F, col.names = F)
output_path <- paste(c(tempdir(), 'crf_test_out_data_', rnorm(1)), collapse = '')
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
out <- read.delim(output_path, sep = '\t', blank.lines.skip = F, stringsAsFactors = F, header = F)
View(out)
crf_test <- function(test_data, model_path='model.out' , nbest = '0', cost_factor = '1', label = F){
if(!is.data.frame(test_data) & is.matrix(test_data)) stop('test_data must be data.fram or matrix.')
if(!file.exists(model_path)) stop('the model file does not exist.')
if(label){
label_data <-  test_data[,ncol(test_data)]
test_data <- test_data[, -ncol(test_data)]
}
test_path <- paste(c(tempdir(), 'test_data_', rnorm(1)), collapse = '')
write.table(test_data, test_path, row.names = F, na="", quote = F, col.names = F)
output_path <- paste(c(tempdir(), 'crf_test_out_data_', rnorm(1)), collapse = '')
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
out <- read.delim(output_path, sep = '\t', blank.lines.skip = F, stringsAsFactors = F, header = F)
ifelse(label, cbind(out,label_data), out)
}
aa
bb <- crf_test(test_data = test_data, model_path =aa, label = T )
test_data
test_data <- read.delim('./test.data', sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
bb <- crf_test(test_data = test_data, model_path =aa, label = T )
bb
View(bb)
View(test_data)
label
crf_test <- function(test_data, model_path='model.out' , nbest = '0', cost_factor = '1', label = F){
if(!is.data.frame(test_data) & is.matrix(test_data)) stop('test_data must be data.fram or matrix.')
if(!file.exists(model_path)) stop('the model file does not exist.')
if(label){
label_data <-  test_data[,ncol(test_data)]
test_data <- test_data[, -ncol(test_data)]
}
test_path <- paste(c(tempdir(), 'test_data_', rnorm(1)), collapse = '')
write.table(test_data, test_path, row.names = F, na="", quote = F, col.names = F)
output_path <- paste(c(tempdir(), 'crf_test_out_data_', rnorm(1)), collapse = '')
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
out <- read.delim(output_path, sep = '\t', blank.lines.skip = F, stringsAsFactors = F, header = F)
ifelse(label, cbind(out,label_data), out)
}
bb <- crf_test(test_data = test_data, model_path =aa, label = T )
bb
if(!is.data.frame(test_data) & is.matrix(test_data)) stop('test_data must be data.fram or matrix.')
if(!file.exists(model_path)) stop('the model file does not exist.')
if(label){
label_data <-  test_data[,ncol(test_data)]
test_data <- test_data[, -ncol(test_data)]
}
test_path <- paste(c(tempdir(), 'test_data_', rnorm(1)), collapse = '')
write.table(test_data, test_path, row.names = F, na="", quote = F, col.names = F)
output_path <- paste(c(tempdir(), 'crf_test_out_data_', rnorm(1)), collapse = '')
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
out <- read.delim(output_path, sep = '\t', blank.lines.skip = F, stringsAsFactors = F, header = F)
bb <- ifelse(label, cbind(out,label_data), out)
View(bb)
View(out)
label_data <-  test_data[,ncol(test_data)] %>% as.data.frame()
bb <- ifelse(label, cbind(out,label_data), out)
View(bb)
cbind(out,label_data)
bb <- ifelse(label, cbind(out,label_data), out)
View(bb)
View(out)
View(label_data)
cbind(out,label_data)
bb <- ifelse(label, cbind(out,label_data), out)
crf_test <- function(test_data, model_path='model.out' , nbest = '0', cost_factor = '1', label = F){
if(!is.data.frame(test_data) & is.matrix(test_data)) stop('test_data must be data.fram or matrix.')
if(!file.exists(model_path)) stop('the model file does not exist.')
if(label){
label_data <-  test_data[,ncol(test_data)] %>% as.data.frame()
test_data <- test_data[, -ncol(test_data)]
}
test_path <- paste(c(tempdir(), 'test_data_', rnorm(1)), collapse = '')
write.table(test_data, test_path, row.names = F, na="", quote = F, col.names = F)
output_path <- paste(c(tempdir(), 'crf_test_out_data_', rnorm(1)), collapse = '')
crf_test_(test_path, model_path, output_path, nbest, cost_factor)
out <- read.delim(output_path, sep = '\t', blank.lines.skip = F, stringsAsFactors = F, header = F)
if(label){
cbind(out,label_data)
}else{
out
}
}
aa
test_data <- read.delim('./test.data', sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
bb <- crf_test(test_data = test_data, model_path =aa, label = T )
View(bb)
Sys.setenv("PKG_CXXFLAGS"="-std=c++11")
library(Rcpp)
library(BioTmR)
test_data <- read.delim('./test.data', sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
sapply(1:ncol(data), function(ii){
data[,ii] %>% class()
})
test_data <- read.delim('./test.data', sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
data <- suffix_feature(test_data)
sapply(1:ncol(data), function(x){
class(data[,x])
})
cols=2:4
pos=-2:0
data <- check_feature(data);
if(length(cols)!= length(pos)) stop('cols and pos must be corresponding')
bind_word <- sapply(1:length(cols), function(jj){
pos1 <- ii+pos[jj]
if(pos1 > 0){
data[pos1, cols[jj]]
}else{
data[ii, cols[jj]]
}
})
ii=1
jj=1
bind_word <- sapply(1:length(cols), function(jj){
pos1 <- ii+pos[jj]
if(pos1 > 0){
data[pos1, cols[jj]]
}else{
data[ii, cols[jj]]
}
})
paste(bind_word, collapse = sep)
sep = '_'
bind = T
bind_word <- sapply(1:length(cols), function(jj){
pos1 <- ii+pos[jj]
if(pos1 > 0){
data[pos1, cols[jj]]
}else{
data[ii, cols[jj]]
}
})
paste(bind_word, collapse = sep)
out <- ldply(1:length(data[,1]), .progress = 'text', function(ii){
bind_word <- sapply(1:length(cols), function(jj){
pos1 <- ii+pos[jj]
if(pos1 > 0){
data[pos1, cols[jj]]
}else{
data[ii, cols[jj]]
}
})
paste(bind_word, collapse = sep)
})
out
View(out)
class(out)
class(out[,1])
class(out[,2])
bind_feature <- function(data, cols, pos, sep = '_', bind = T){
data <- check_feature(data);
if(length(cols)!= length(pos)) stop('cols and pos must be corresponding')
out <- ldply(1:length(data[,1]), .progress = 'text', function(ii){
bind_word <- sapply(1:length(cols), function(jj){
pos1 <- ii+pos[jj]
if(pos1 > 0){
data[pos1, cols[jj]]
}else{
data[ii, cols[jj]]
}
})
paste(bind_word, collapse = sep)
})
if(bind){
out <- cbind(data, out)
}else{
out <- cbind(data[,1], out)
}
out
}
bind_feature(data, cols=1:3, pos = -2:0)
bind_feature(data, cols=1:3, pos = -2:0) %>% View()
bind_feature(data, cols=1:3, pos = -2:0) ->aa
ncol(aa)
class(aa[,7])
library(BioTmR)
help.start()
library(BioTmR)
library(BioTmR)
library(BioTmR)
library(BioTmR)
library(devtools)
library(devtools)
library(roxygen2)
document()
library("BioTmR", lib.loc="/Library/Frameworks/R.framework/Versions/library")
?bind_feature
document()
document()
tools::Rdindex()
library(testthat)
test_dir('./R')
library(roxygen2)
library(BioTmR)
rcpp_hello()
BioTmR::genia_tagger()
BioTmR:::genia_tagger()
BioTmR:::genia_tagger('afsd')
file="/Users/lipidong/Desktop/genia.txt"
BioTmR:::genia_tagger(file)
BioTmR:::genia_(file)
library(roxygen2)
roxygenize('.')
library(BioTmR)
roxygenize('.')
roxygenize('.')
library(BioTmR)
genia_tagger()
genia_tagger("/Users/lipidong/Desktop/genia.txt")
BioTmR:::genia_("/Users/lipidong/Desktop/genia.txt")
BioTmR:::BioTmR_genia_
BioTmR:::genia_()
BioTmR:::genia_("/Users/lipidong/Desktop/genia.txt")
library(BioTmR)
BioTmR:::genia_("/Users/lipidong/Desktop/genia.txt")
BioTmR:::genia_("/Users/lipidong/Desktop/genia.txt")
BioTmR:::genia_("/Users/lipidong/Desktop/genia.txt")
BioTmR:::genia_tagger("/Users/lipidong/Desktop/genia.txt")
BioTmR:::genia_("/Users/lipidong/Desktop/genia.txt")
library(BioTmR)
BioTmR:::genia_("/Users/lipidong/Desktop/genia.txt")
library(BioTmR)
BioTmR:::crf_train()
crf_train <- function( train_data = '/Users/lipidong/baiduyun/work/c++/crf/crf/train.data', template_data = '/Users/lipidong/baiduyun/work/c++/crf/crf/template', model_dir = getwd(), freq = '1',  max_iterations = '10000', cost = '1',  eta ='0.0001', algorithm = 'CRF',  shrinking_size = '20'){
if(!is.data.frame(train_data) & !is.matrix(train_data) & !is.character(train_data)) stop('input data must be data.frame, matrix or file path')
if(!file.exists(model_dir)) stop('please input a valid model file path.')
if(is.character(train_data)){
if(file.exists(train_data)){
path = train_data
}else{
stop('the train data file does not exist')
}
}else{
path <- paste(c(tempdir(), 'train_data_', rnorm(1)), collapse = '')
write.table(train_data, path, row.names = F, na="", quote = F)
}
model_path <- paste(c(model_dir, '/model.out'), collapse = '')
file.create(model_path)
crf_learn_(template_data,  path,  model_path, freq,  max_iterations, cost,  eta, algorithm,  shrinking_size)
cat(paste(c('The model file will be saved in \n', model_path), collapse = ''))
model_path
}
BioTmR:::crf_train()
BioTmR:::crf_train()
train_data <- read.delim('./train.data', sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
aa <- crf_train(train_data, template_data = './template')
library(roxygen2)
roxygenise('.')
library(BioTmR)
genia_tagger()
file="/Users/lipidong/Desktop/genia.txt"
genia_tagger(file)
genia_ <- function(file) {
.Call('BioTmR_genia_', PACKAGE = 'BioTmR', file)
}
genia_ <- function(file) {
)))
genia_tagger(file)
BioTmR:::rcpp_hello()
train_data <- read.delim('./train.data', sep = ' ', blank.lines.skip = F, stringsAsFactors = F, header = F)
aa <- crf_train(train_data, template_data = './template')
BioTmR:::crf_learn_()
BioTmR:::crf_learn_(train_data = '/Users/lipidong/baiduyun/work/c++/crf/crf/train.data', template_data = '/Users/lipidong/baiduyun/work/c++/crf/crf/template', model_dir = getwd(), freq = '1',  max_iterations = '10000', cost = '1',  eta ='0.0001', algorithm = 'CRF',  shrinking_size = '20')
BioTmR:::crf_learn_(train_data = '/Users/lipidong/baiduyun/work/c++/crf/crf/train.data', template_data = '/Users/lipidong/baiduyun/work/c++/crf/crf/template', model_dir = getwd(), freq = '1',  max_iterations = '10000', cost = '1',  eta ='0.0001', algorithm = 'CRF',  shrinking_size = '20')
BioTmR:::crf_learn_(train_data = '/Users/lipidong/baiduyun/work/c++/crf/crf/train.data', template_data = '/Users/lipidong/baiduyun/work/c++/crf/crf/template')
BioTmR:::crf_learn_(train_data = '/Users/lipidong/baiduyun/work/c++/crf/crf/train.data', template_data = '/Users/lipidong/baiduyun/work/c++/crf/crf/template')
crf_train()
